apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "chart.fullname" . }}
  labels:
{{ include "chart.labels" . | indent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "chart.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  revisionHistoryLimit: 3
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "chart.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      {{- if .Values.securityContext.enabled }}
      securityContext:
        fsGroup: {{ .Values.securityContext.fsGroup }}
        runAsUser: {{ .Values.securityContext.runAsUser }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
        {{- if (.Values.envFrom) }}
          envFrom:
          {{- range .Values.envFrom }}
            - secretRef:
                name: {{ .name }}
          {{- end }}
        {{- end }}
        {{- if or (.Values.env) (.Values.mountedSecrets) }}
          env:
          {{- range .Valueszenv }}
          {{- if .name }}
            - name: {{ .name }}
              value: {{ .value }}
          {{- end }}
          {{- end }}
          {{- range .Values.mountedSecrets }}
          {{- if .name }}
            - name: {{ .name }}
              valueFrom:
                secretKeyRef:
                  name: {{ .secretName }}
                  key: {{ .secretKey }}
          {{- end }}
          {{- end }}
        {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
      {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.livenessProbe.httpGet.path }}
              port: {{ .Values.livenessProbe.httpGet.port }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
      {{- end }}
      {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: {{ .Values.readinessProbe.httpGet.path }}
              port: {{ .Values.readinessProbe.httpGet.port }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
      {{- end }}
          resources:
          {{- if .Values.resources }}
            {{- toYaml .Values.resources | nindent 12 }}
          {{- else }}
            {}
          {{- end }}
          volumeMounts:
            {{- if .Values.logsPersistence.enabled }}
            - name: logs-data
              {{- if .Values.logs.path }}
              mountPath: {{ .Values.logs.path }}
              {{ else }}
              {{ (printf "usr/local/%s/logs" (include "chart.fullname" . | trunc 58 )) }}
              {{- end }}
              subPath: {{ .Values.logsPersistence.subPath | default "" }}
          {{- end }}
      volumes:
        {{- if .Values.logsPersistence.enabled }}
        - name: logs-data
          persistentVolumeClaim:
            claimName: {{ .Values.logsPersistence.existingClaim | default (printf "%s-logs" (include "chart.fullname" . | trunc 58 )) }}
        {{- end }}